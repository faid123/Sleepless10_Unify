#version 330 core
layout(location = 0) out vec4 FragColor;
layout(location = 1) out int EntityID;

struct Material {
    //sampler2D diffuse;
    //sampler2D specular;
    float shininess;
}; 

struct DirLight {
    vec3 direction;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

struct SpotLight {
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;   
    vec3 position;
    float cutOff;
    float outerCutOff;
  
    float constant;
    float linear;
    float quadratic;
  
         
};

//MAX AMOUNT OF LIGHT PER TYPE
#define NR_MAX_LIGHTS 8
#define MAX_DIR_LIGHTS 1
//UNIFORMS OF AMT OF LIGHT COMING IN
uniform int numDir;
uniform int numPoint;
uniform int numSpot;

in vec3 FragPos;
in vec3 Normal;
in vec3 Clr;
in vec2 TexCoords;

uniform bool useTexture;

uniform sampler2D uTex2d;

uniform vec3 viewPos;
uniform DirLight dirLights[MAX_DIR_LIGHTS];

uniform PointLight pointLights[NR_MAX_LIGHTS];
uniform SpotLight spotLights[NR_MAX_LIGHTS];
uniform Material material;

uniform vec3 saturation;

uniform int entityID;

// function prototypes
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 rgb2hsv(vec3 c);
vec3 hsv2rgb(vec3 c);

const float gamma =2.2;
vec3 texClr;
void main()
{    
    EntityID = entityID;

    // properties
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);

    if(useTexture)
    {
        vec3 vHSV = saturation;
        vec3 fragRGB = texture2D(uTex2d, TexCoords).rgb;
        vec3 fragHSV = rgb2hsv(fragRGB).xyz;
        fragHSV.x += vHSV.x / 360.0;
        fragHSV.yz *= vHSV.yz;
        fragHSV.x = mod(fragHSV.x,1.0);
        fragHSV.yz = clamp(fragHSV.yz,-100.0,100.0);
        texClr = hsv2rgb(fragHSV);


        //texClr = texture(uTex2d, TexCoords).rgb;

    }
        
    else
        texClr = Clr;


    // == =====================================================
    // Our lighting is set up in 3 phases: directional, point lights and an optional flashlight
    // For each phase, a calculate function is defined that calculates the corresponding color
    // per lamp. In the main() function we take all the calculated colors and sum them up for
    // this fragment's final color.
    // == =====================================================
    vec3 result = vec3(0.0f);

    // phase 1: directional lighting
    for(int i = 0; i < numDir; i++)
        result += CalcDirLight(dirLights[i], norm, viewDir);

    // phase 2: point lights
    for(int i = 0; i < numPoint; i++)
        result += CalcPointLight(pointLights[i], norm, FragPos, viewDir);    

    // phase 3: spot light
    for(int i = 0; i < numSpot; i++)
        result += CalcSpotLight(spotLights[i], norm, FragPos, viewDir);    
    
    //result = Clr;
    FragColor = vec4(result, 1.0);
    FragColor.rgb = pow(FragColor.rgb,vec3(1.0/gamma));


}
vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
// calculates the color when using a directional light.
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // combine results

    vec3 ambient = light.ambient * texClr;
    vec3 diffuse = light.diffuse * diff * texClr;
    vec3 specular = light.specular * spec * texClr;
    
    return (ambient + diffuse + specular);
}

// calculates the color when using a point light.
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // combine results
    
    vec3 ambient = light.ambient * texClr;
    vec3 diffuse = light.diffuse * diff * texClr;
    vec3 specular = light.specular * spec * texClr;

    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}

// calculates the color when using a spot light.
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    // combine results

    
    vec3 ambient = light.ambient * texClr;
    vec3 diffuse = light.diffuse * diff * texClr;
    vec3 specular = light.specular * spec * texClr;
    
    /*
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
    */


    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;
    return (ambient + diffuse + specular);
}